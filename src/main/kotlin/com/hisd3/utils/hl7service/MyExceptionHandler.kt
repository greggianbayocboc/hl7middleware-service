package com.hisd3.utils.hl7service

import ca.uhn.hl7v2.HL7Exception
import ca.uhn.hl7v2.protocol.ReceivingApplicationExceptionHandler


class MyExceptionHandler : ReceivingApplicationExceptionHandler {

    /**
     * Process an exception.
     *
     * @param theIncomingMessage
     * the incoming message. This is the raw message which was
     * received from the external system
     * @param theIncomingMetadata
     * Any metadata that accompanies the incoming message. See [ca.uhn.hl7v2.protocol.Transportable.getMetadata]
     * @param theOutgoingMessage
     * the outgoing message. The response NAK message generated by
     * HAPI.
     * @param theE
     * the exception which was received
     * @return The new outgoing message. This can be set to the value provided
     * by HAPI in `outgoingMessage`, or may be replaced with
     * another message. **This method may not return `null`**.
     */
    @Throws(HL7Exception::class)

    override fun processException(theIncomingMessage: String, theIncomingMetadata: Map<String, Any>, theOutgoingMessage: String, theE: Exception): String {

        /*
          * Here you can do any processing you like. If you want to change
          * the response (NAK) message which will be returned you may do
           * so, or just return the NAK which HAPI already created (theOutgoingMessage)
          */
        System.out.println("HL7Exception: " + theOutgoingMessage)

        return theOutgoingMessage
    }

}
